{"version":3,"sources":["components/game.js","reduxActions/actions.js"],"names":["Choices","React","lazy","Game","checkAnswer","val","btn","document","querySelectorAll","forEach","classList","remove","userAns","answer","props","state","Number","addScore","timerAdd","timerSubtract","inplay","clearInterval","timer","randomQuest","restart","gameover","querySelector","reset","this","timerReady","add","randomQuestion","setInterval","minutes","seconds","number1","number2","operation","choices","score","fallback","className","onClick","to","Component","connect","dispatch","type"],"mappings":"wLAKMA,EAAUC,IAAMC,MAAK,kBAAK,gCAE1BC,E,4MAEFC,YAAc,SAACC,GACX,IAAIC,EAAMC,SAASC,iBAAiB,eACpCF,EAAIG,SAAQ,SAAAH,GAAG,OAAIA,EAAII,UAAUC,OAAO,YACxCL,EAAIG,SAAQ,SAAAH,GAAG,OAAIA,EAAII,UAAUC,OAAO,cAExC,IAAIC,EAAUP,EACPQ,EAAU,EAAKC,MAAMC,MAArBF,OACJG,OAAOJ,KAAaC,GACnB,EAAKC,MAAMG,WACX,EAAKH,MAAMI,aAEX,EAAKJ,MAAMK,gBACP,EAAKL,MAAMC,MAAMK,QACjBC,cAAc,EAAKC,QAG3B,EAAKC,e,EAoBTC,QAAU,WACN,IAAIlB,EAAMC,SAASC,iBAAiB,eAChCiB,EAAWlB,SAASmB,cAAc,aACtCpB,EAAIG,SAAQ,SAAAH,GAAG,OAAIA,EAAII,UAAUC,OAAO,cACxCc,EAASf,UAAUC,OAAO,cAC1B,EAAKG,MAAMa,QACX,EAAKJ,e,kEAvBLK,KAAKL,cACLK,KAAKC,e,2CAGL,IAAID,KAAKd,MAAMC,MAAMK,OAAO,CAExB,IAAIK,EAAWlB,SAASmB,cAAc,aAItC,OAHUnB,SAASC,iBAAiB,eAChCC,SAAQ,SAAAH,GAAG,OAAIA,EAAII,UAAUoB,IAAI,cACrCL,EAASf,UAAUoB,IAAI,cAChBT,cAAcO,KAAKN,OAE9B,OAAOM,KAAKN,Q,oCAGZ,OAAOM,KAAKd,MAAMiB,mB,mCAUT,IAAD,OACRH,KAAKN,MAAQU,aAAY,WAClB,EAAKlB,MAAMC,MAAMK,QAChB,EAAKN,MAAMQ,UAEhB,O,6CAIHD,cAAcO,KAAKN,OACnBM,KAAKd,MAAMa,U,+BAEN,IAAD,EAC4EC,KAAKd,MAAMC,MAApFkB,EADH,EACGA,QAASC,EADZ,EACYA,QAASC,EADrB,EACqBA,QAASC,EAD9B,EAC8BA,QAASC,EADvC,EACuCA,UAAWC,EADlD,EACkDA,QAASC,EAD3D,EAC2DA,MAAO1B,EADlE,EACkEA,OACtE,OACI,kBAAC,WAAD,CAAU2B,SAAU,yCAChB,yBAAKC,UAAU,QACX,4BAAKR,EAAL,IAAeC,GACdK,EACD,yBAAKE,UAAU,YAAf,aAGA,yBAAKA,UAAU,YACX,2BAAIN,EAAJ,IAAcE,EAAd,IAA0BD,EAA1B,SAEJ,kBAACpC,EAAD,CAASsC,QAASA,EAASlC,YAAawB,KAAKxB,YAAaS,OAAQA,IAClE,yBAAK4B,UAAU,eACX,4BAAQC,QAASd,KAAKJ,SAAtB,WACA,kBAAC,IAAD,CAAMmB,GAAG,KAAI,gD,GA1ElB1C,IAAM2C,WA8GVC,uBA3BS,SAAC9B,GACrB,MAAM,CACFA,MAAOA,MAGY,SAAC+B,GACxB,MAAM,CACFf,eAAgB,WACZe,ECjGF,CACFC,KAAO,qBDkGP9B,SAAU,WACN6B,EC/FF,CACFC,KAAO,eDgGPpB,MAAO,WACHmB,EC7FF,CACFC,KAAO,WD8FPzB,MAAO,WACHwB,EC3FF,CACFC,KAAO,WD4FP7B,SAAU,WACN4B,ECzFF,CACFC,KAAO,eD0FP5B,cAAe,WACX2B,ECvFF,CACFC,KAAO,uBD0FAF,CAA6C1C","file":"static/js/4.f4b31560.chunk.js","sourcesContent":["import React, {Suspense} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {randomQuestion, addScore, reset, timer, timerAdd, timerSubtract} from '../reduxActions/actions'\r\n\r\nconst Choices = React.lazy(()=> import('./choicesBtn'));\r\n\r\nclass Game extends React.Component{\r\n\r\n    checkAnswer = (val) => {\r\n        let btn = document.querySelectorAll('.choices li');\r\n        btn.forEach(btn => btn.classList.remove('wrong'));\r\n        btn.forEach(btn => btn.classList.remove('correct'));\r\n  \r\n        let userAns = val;\r\n        const {answer} = this.props.state;\r\n        if(Number(userAns) === answer){\r\n            this.props.addScore();\r\n            this.props.timerAdd();\r\n        }else{\r\n            this.props.timerSubtract();\r\n            if(!this.props.state.inplay){\r\n                clearInterval(this.timer);\r\n            }\r\n        }\r\n        this.randomQuest();\r\n    }\r\n    componentDidMount(){\r\n        this.randomQuest();\r\n        this.timerReady();\r\n    }\r\n    componentDidUpdate(){\r\n        if(!this.props.state.inplay){\r\n            \r\n            let gameover = document.querySelector('.gameover');\r\n            let btn = document.querySelectorAll('.choices li');\r\n            btn.forEach(btn => btn.classList.add('disable'));\r\n            gameover.classList.add('gameisover')\r\n            return clearInterval(this.timer);\r\n        }\r\n        return this.timer;\r\n    }\r\n    randomQuest(){\r\n        return this.props.randomQuestion();\r\n    }\r\n    restart = () =>{\r\n        let btn = document.querySelectorAll('.choices li');\r\n        let gameover = document.querySelector('.gameover');\r\n        btn.forEach(btn => btn.classList.remove('disable'));\r\n        gameover.classList.remove('gameisover');\r\n        this.props.reset();\r\n        this.randomQuest();\r\n    }\r\n    timerReady(){\r\n        this.timer = setInterval(() => {\r\n            if(this.props.state.inplay){\r\n                this.props.timer();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n        this.props.reset();\r\n    }\r\n    render(){\r\n        const {minutes, seconds, number1, number2, operation, choices, score, answer} = this.props.state;\r\n        return(\r\n            <Suspense fallback={<div>wait...</div>}>\r\n                <div className='game'>\r\n                    <h3>{minutes}:{seconds}</h3>\r\n                    {score}\r\n                    <div className='gameover'>\r\n                        Game Over\r\n                    </div>\r\n                    <div className='question'>\r\n                        <p>{number1} {operation} {number2} = ?</p>\r\n                    </div>\r\n                    <Choices choices={choices} checkAnswer={this.checkAnswer} answer={answer}/>\r\n                    <div className='game-button'>\r\n                        <button onClick={this.restart}>Restart</button>\r\n                        <Link to='/'><button>Menu</button></Link>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </Suspense>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        state: state\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        randomQuestion: () =>{\r\n            dispatch(randomQuestion());\r\n        },\r\n        addScore: () => {\r\n            dispatch(addScore());\r\n        },\r\n        reset: () => {\r\n            dispatch(reset());\r\n        },\r\n        timer: () => {\r\n            dispatch(timer());\r\n        },\r\n        timerAdd: () => {\r\n            dispatch(timerAdd());\r\n        },\r\n        timerSubtract: () => {\r\n            dispatch(timerSubtract())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","export const randomQuestion = () =>{\r\n    return{\r\n        type : 'RANDOM_QUESTION',\r\n    }\r\n}\r\nexport const addScore = () =>{\r\n    return{\r\n        type : 'ADD_SCORE',\r\n    }\r\n}\r\nexport const reset = () =>{\r\n    return{\r\n        type : 'RESET',\r\n    }\r\n}\r\nexport const timer = () =>{\r\n    return{\r\n        type : 'TIMER',\r\n    }\r\n}\r\nexport const timerAdd = () =>{\r\n    return{\r\n        type : 'TIMER_ADD',\r\n    }\r\n}\r\nexport const timerSubtract = () =>{\r\n    return{\r\n        type : 'TIMER_SUBTRACT',\r\n    }\r\n}"],"sourceRoot":""}