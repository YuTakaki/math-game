{"version":3,"sources":["App.js","serviceWorker.js","redux/redux.js","index.js"],"names":["ScoreList","React","lazy","Game","Menu","App","props","state","screen","className","fallback","exact","path","component","Component","Boolean","window","location","hostname","match","initState","score","highestScore","minutes","seconds","operation","number1","number2","answer","choices","inplay","random","num","Math","floor","random2","randomNum","Number","toFixed","randomizeChoices","ans","x","y","z","arr","i","length","index","temp","console","log","reducer","action","type","operations","num1","num2","o","addedScore","highScore","secs","minute","game","add_secs","add_minute","sub_secs","sub_minute","sub_game","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e8538a8.chunk.js","sourcesContent":["import React, {Suspense} from 'react';\nimport './styles/css/main.css';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\nconst ScoreList = React.lazy(()=>import('./components/scoreList'));\nconst Game = React.lazy(()=>import('./components/game'))\nconst Menu = React.lazy(() => import('./components/menu'));\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      screen: null,\n    }\n  }\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1>Math Game</h1>\n          <Suspense fallback={<div>Wait...</div>}>\n            <Route exact path='/' component={Menu}/>\n            <Route path='/game' component={Game}/>\n            <Route path='/scoreList' component={ScoreList}/>\n          </Suspense>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    score: 0,\r\n    highestScore: 0,\r\n    minutes: 1,\r\n    seconds: '00',\r\n    operation: '',\r\n    number1: 0,\r\n    number2: 0,\r\n    answer: 0,\r\n    choices: [],\r\n    inplay: false,\r\n};\r\nfunction random(num){\r\n    return Math.floor(Math.random() * num);\r\n}\r\nfunction random2(num){\r\n    let randomNum = (Math.random() * num)\r\n    return Number(randomNum.toFixed(2));\r\n}\r\nfunction randomizeChoices(ans){\r\n    let x = random2(ans*5);\r\n    let y = random2(ans*5);\r\n    let z = random2(ans*5);\r\n    let arr = [Number(ans), x, y, z];\r\n    for(let i = 0; i < arr.length; i++){\r\n        let index = Math.floor(random(arr.length));\r\n        let temp = arr[i];\r\n        arr[i] = arr[index];\r\n        arr[index] = temp;\r\n    }\r\n    console.log(arr)\r\n    return arr;\r\n}\r\nconst reducer = (state = initState, action) =>{\r\n    switch(action.type){\r\n        case 'RANDOM_QUESTION':\r\n            const operations = ['+', '-', '/', '*'];\r\n            let num1 = random2(100);\r\n            let num2 = random2(num1);\r\n            let o =  operations[random(operations.length)];\r\n            let ans = '';\r\n            if(o === '+'){\r\n                ans = (num1) + (num2);\r\n            }else if(o === '-'){\r\n                ans = (num1) - (num2);\r\n            }else if(o === '/'){\r\n                ans = (num1) / (num2);\r\n            }else if(o === '*'){\r\n                ans = (num1) * (num2);\r\n            }\r\n            return{\r\n                ...state,\r\n                number1 : num1,\r\n                number2 : num2,\r\n                operation : o,\r\n                answer: Number(ans.toFixed(2)),\r\n                choices: randomizeChoices(ans.toFixed(2)),\r\n                inplay: true,\r\n            }\r\n        case 'ADD_SCORE':\r\n            let addedScore = state.score + 1;\r\n            let highScore = state.highestScore < addedScore ? addedScore : state.highestScore;\r\n            return {\r\n                ...state,\r\n                score: addedScore,\r\n                highestScore: highScore\r\n            }\r\n        case 'RESET':\r\n            return{\r\n                ...state,\r\n                score: 0,\r\n                minutes: 1,\r\n                seconds: '00',\r\n                operation: '',\r\n                number1: 0,\r\n                number2: 0,\r\n                answer: 0,\r\n                choices: [],\r\n                inplay: false,\r\n            }\r\n        case 'TIMER':\r\n            let secs = Number(state.seconds);\r\n            let minute = state.minutes;\r\n            let game = true;\r\n            if(secs === 0){\r\n                secs = 59;\r\n                minute -= 1;\r\n            }else{\r\n                secs -= 1;\r\n            }\r\n            if(secs <= 9 && secs >= 0){\r\n                secs = '0' + secs;\r\n            }\r\n            if(minute <= -1 &&  secs === 59){\r\n                secs = 0 + '0';\r\n                minute = 0;\r\n                game = false;\r\n            }\r\n            return{\r\n                ...state,\r\n                seconds: secs,\r\n                minutes: minute,\r\n                inplay: game\r\n            }\r\n        case 'TIMER_ADD':\r\n            let add_secs = Number(state.seconds) + 5;\r\n            let add_minute = state.minutes;\r\n            if(add_secs > 60){\r\n                add_secs -= 60;\r\n                add_minute += 1;\r\n            }\r\n            if(add_secs <= 9 && add_secs >= 0){\r\n                add_secs = '0' + add_secs;\r\n            }\r\n            return{\r\n                ...state,\r\n                seconds: add_secs,\r\n                minutes: add_minute,\r\n            }\r\n        case 'TIMER_SUBTRACT':\r\n            let sub_secs = Number(state.seconds) - 5;\r\n            let sub_minute = state.minutes;\r\n            let sub_game = true;\r\n            if(sub_secs < 0){\r\n                sub_secs = 60 + sub_secs;\r\n                sub_minute -= 1;\r\n            }\r\n            if(sub_secs <= 9 && sub_secs >= 0){\r\n                sub_secs = '0' + sub_secs;\r\n            }\r\n            if(sub_minute < 0){\r\n                sub_secs = 0 + '0';\r\n                sub_minute = 0;\r\n                sub_game = false;\r\n            }\r\n\r\n            return{\r\n                ...state,\r\n                seconds: sub_secs,\r\n                minutes: sub_minute,\r\n                inplay: sub_game\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport reducer from './redux/redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}