{"version":3,"sources":["components/scoreList.js","components/game.js","reduxActions/actions.js","components/menu.js","App.js","serviceWorker.js","redux/redux.js","index.js"],"names":["ScoreList","highestScore","this","props","state","className","to","React","Component","connect","Choices","lazy","Game","checkAnswer","val","btn","document","querySelectorAll","forEach","classList","remove","userAns","answer","Number","addScore","timerAdd","timerSubtract","inplay","clearInterval","timer","randomQuest","restart","gameover","querySelector","reset","timerReady","add","randomQuestion","setInterval","minutes","seconds","number1","number2","operation","choices","score","fallback","onClick","dispatch","type","Menu","App","screen","exact","path","component","Boolean","window","location","hostname","match","initState","random","num","Math","floor","random2","randomNum","toFixed","randomizeChoices","ans","x","y","z","arr","i","length","index","temp","console","log","reducer","action","operations","num1","num2","o","addedScore","highScore","secs","minute","game","add_secs","add_minute","sub_secs","sub_minute","sub_game","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.306a6275.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass ScoreList extends React.Component{\r\n    render(){\r\n        const {highestScore} = this.props.state\r\n        return(\r\n            <div className='score'>\r\n                <h2>High Score</h2>\r\n                <p>{highestScore}</p>\r\n                <Link to='/'><button>back</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        state: state\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(ScoreList);","import React, {Suspense} from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\nimport {randomQuestion, addScore, reset, timer, timerAdd, timerSubtract} from '../reduxActions/actions'\r\n\r\nconst Choices = React.lazy(()=> import('./choicesBtn'));\r\n\r\nclass Game extends React.Component{\r\n\r\n    checkAnswer = (val) => {\r\n        let btn = document.querySelectorAll('.choices li');\r\n        btn.forEach(btn => btn.classList.remove('wrong'));\r\n        btn.forEach(btn => btn.classList.remove('correct'));\r\n  \r\n        let userAns = val;\r\n        const {answer} = this.props.state;\r\n        if(Number(userAns) === answer){\r\n            this.props.addScore();\r\n            this.props.timerAdd();\r\n        }else{\r\n            this.props.timerSubtract();\r\n            if(!this.props.state.inplay){\r\n                clearInterval(this.timer);\r\n            }\r\n        }\r\n        this.randomQuest();\r\n    }\r\n    componentDidMount(){\r\n        this.randomQuest();\r\n        this.timerReady();\r\n    }\r\n    componentDidUpdate(){\r\n        if(!this.props.state.inplay){\r\n            \r\n            let gameover = document.querySelector('.gameover');\r\n            let btn = document.querySelectorAll('.choices li');\r\n            btn.forEach(btn => btn.classList.add('disable'));\r\n            gameover.classList.add('gameisover')\r\n            return clearInterval(this.timer);\r\n        }\r\n        return this.timer;\r\n    }\r\n    randomQuest(){\r\n        return this.props.randomQuestion();\r\n    }\r\n    restart = () =>{\r\n        let btn = document.querySelectorAll('.choices li');\r\n        let gameover = document.querySelector('.gameover');\r\n        btn.forEach(btn => btn.classList.remove('disable'));\r\n        gameover.classList.remove('gameisover');\r\n        this.props.reset();\r\n        this.randomQuest();\r\n    }\r\n    timerReady(){\r\n        this.timer = setInterval(() => {\r\n            if(this.props.state.inplay){\r\n                this.props.timer();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timer);\r\n        this.props.reset();\r\n    }\r\n    render(){\r\n        const {minutes, seconds, number1, number2, operation, choices, score, answer} = this.props.state;\r\n        return(\r\n            <Suspense fallback={<div>wait...</div>}>\r\n                <div className='game'>\r\n                    <h3>{minutes}:{seconds}</h3>\r\n                    {score}\r\n                    <div className='gameover'>\r\n                        Game Over\r\n                    </div>\r\n                    <div className='question'>\r\n                        <p>{number1} {operation} {number2} = ?</p>\r\n                    </div>\r\n                    <Choices choices={choices} checkAnswer={this.checkAnswer} answer={answer}/>\r\n                    <div className='game-button'>\r\n                        <button onClick={this.restart}>Restart</button>\r\n                        <Link to='/'><button>Menu</button></Link>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n            </Suspense>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n        state: state\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return{\r\n        randomQuestion: () =>{\r\n            dispatch(randomQuestion());\r\n        },\r\n        addScore: () => {\r\n            dispatch(addScore());\r\n        },\r\n        reset: () => {\r\n            dispatch(reset());\r\n        },\r\n        timer: () => {\r\n            dispatch(timer());\r\n        },\r\n        timerAdd: () => {\r\n            dispatch(timerAdd());\r\n        },\r\n        timerSubtract: () => {\r\n            dispatch(timerSubtract())\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","export const randomQuestion = () =>{\r\n    return{\r\n        type : 'RANDOM_QUESTION',\r\n    }\r\n}\r\nexport const addScore = () =>{\r\n    return{\r\n        type : 'ADD_SCORE',\r\n    }\r\n}\r\nexport const reset = () =>{\r\n    return{\r\n        type : 'RESET',\r\n    }\r\n}\r\nexport const timer = () =>{\r\n    return{\r\n        type : 'TIMER',\r\n    }\r\n}\r\nexport const timerAdd = () =>{\r\n    return{\r\n        type : 'TIMER_ADD',\r\n    }\r\n}\r\nexport const timerSubtract = () =>{\r\n    return{\r\n        type : 'TIMER_SUBTRACT',\r\n    }\r\n}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nfunction Menu(){\r\n    return(\r\n        <div className='menu'>\r\n            <Link to='/game'><button>Start</button></Link>\r\n            <Link to='/scoreList'><button>Highest Score</button></Link>\r\n        </div>\r\n    )\r\n}\r\nexport default Menu;","import React, {Suspense} from 'react';\nimport './styles/css/main.css';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport ScoreList from './components/scoreList';\nimport Game from './components/game';\nimport Menu from './components/menu';\n\n// const ScoreList = React.lazy(()=>import('./components/scoreList'));\n// const Game = React.lazy(()=>import('./components/game'))\n// const Menu = React.lazy(() => import('./components/menu'));\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      screen: null,\n    }\n  }\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <h1>Math Game</h1>\n          {/* <Suspense fallback={<div>Wait...</div>}> */}\n            <Route exact path='/' component={Menu}/>\n            <Route path='/game' component={Game}/>\n            <Route path='/scoreList' component={ScoreList}/>\n          {/* </Suspense> */}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n    score: 0,\r\n    highestScore: 0,\r\n    minutes: 1,\r\n    seconds: '00',\r\n    operation: '',\r\n    number1: 0,\r\n    number2: 0,\r\n    answer: 0,\r\n    choices: [],\r\n    inplay: false,\r\n};\r\nfunction random(num){\r\n    return Math.floor(Math.random() * num);\r\n}\r\nfunction random2(num){\r\n    let randomNum = (Math.random() * num)\r\n    return Number(randomNum.toFixed(2));\r\n}\r\nfunction randomizeChoices(ans){\r\n    let x = random2(ans*5);\r\n    let y = random2(ans*5);\r\n    let z = random2(ans*5);\r\n    let arr = [Number(ans), x, y, z];\r\n    for(let i = 0; i < arr.length; i++){\r\n        let index = Math.floor(random(arr.length));\r\n        let temp = arr[i];\r\n        arr[i] = arr[index];\r\n        arr[index] = temp;\r\n    }\r\n    console.log(arr)\r\n    return arr;\r\n}\r\nconst reducer = (state = initState, action) =>{\r\n    switch(action.type){\r\n        case 'RANDOM_QUESTION':\r\n            const operations = ['+', '-', '/', '*'];\r\n            let num1 = random2(100);\r\n            let num2 = random2(num1);\r\n            let o =  operations[random(operations.length)];\r\n            let ans = '';\r\n            if(o === '+'){\r\n                ans = (num1) + (num2);\r\n            }else if(o === '-'){\r\n                ans = (num1) - (num2);\r\n            }else if(o === '/'){\r\n                ans = (num1) / (num2);\r\n            }else if(o === '*'){\r\n                ans = (num1) * (num2);\r\n            }\r\n            return{\r\n                ...state,\r\n                number1 : num1,\r\n                number2 : num2,\r\n                operation : o,\r\n                answer: Number(ans.toFixed(2)),\r\n                choices: randomizeChoices(ans.toFixed(2)),\r\n                inplay: true,\r\n            }\r\n        case 'ADD_SCORE':\r\n            let addedScore = state.score + 1;\r\n            let highScore = state.highestScore < addedScore ? addedScore : state.highestScore;\r\n            return {\r\n                ...state,\r\n                score: addedScore,\r\n                highestScore: highScore\r\n            }\r\n        case 'RESET':\r\n            return{\r\n                ...state,\r\n                score: 0,\r\n                minutes: 1,\r\n                seconds: '00',\r\n                operation: '',\r\n                number1: 0,\r\n                number2: 0,\r\n                answer: 0,\r\n                choices: [],\r\n                inplay: false,\r\n            }\r\n        case 'TIMER':\r\n            let secs = Number(state.seconds);\r\n            let minute = state.minutes;\r\n            let game = true;\r\n            if(secs === 0){\r\n                secs = 59;\r\n                minute -= 1;\r\n            }else{\r\n                secs -= 1;\r\n            }\r\n            if(secs <= 9 && secs >= 0){\r\n                secs = '0' + secs;\r\n            }\r\n            if(minute <= -1 &&  secs === 59){\r\n                secs = 0 + '0';\r\n                minute = 0;\r\n                game = false;\r\n            }\r\n            return{\r\n                ...state,\r\n                seconds: secs,\r\n                minutes: minute,\r\n                inplay: game\r\n            }\r\n        case 'TIMER_ADD':\r\n            let add_secs = Number(state.seconds) + 5;\r\n            let add_minute = state.minutes;\r\n            if(add_secs > 60){\r\n                add_secs -= 60;\r\n                add_minute += 1;\r\n            }\r\n            if(add_secs <= 9 && add_secs >= 0){\r\n                add_secs = '0' + add_secs;\r\n            }\r\n            return{\r\n                ...state,\r\n                seconds: add_secs,\r\n                minutes: add_minute,\r\n            }\r\n        case 'TIMER_SUBTRACT':\r\n            let sub_secs = Number(state.seconds) - 5;\r\n            let sub_minute = state.minutes;\r\n            let sub_game = true;\r\n            if(sub_secs < 0){\r\n                sub_secs = 60 + sub_secs;\r\n                sub_minute -= 1;\r\n            }\r\n            if(sub_secs <= 9 && sub_secs >= 0){\r\n                sub_secs = '0' + sub_secs;\r\n            }\r\n            if(sub_minute < 0){\r\n                sub_secs = 0 + '0';\r\n                sub_minute = 0;\r\n                sub_game = false;\r\n            }\r\n\r\n            return{\r\n                ...state,\r\n                seconds: sub_secs,\r\n                minutes: sub_minute,\r\n                inplay: sub_game\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport reducer from './redux/redux';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}